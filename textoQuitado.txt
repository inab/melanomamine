
class UtilityExtension extends \Twig_Extension
{
    protected $doctrine;
    protected $generator;

    public function __construct(RegistryInterface $doctrine, UrlGeneratorInterface $generator)
    {
        $this->doctrine = $doctrine;
        $this->generator = $generator;
    }

    public function getFilters()
    {
        return array(
            new \Twig_SimpleFilter('getScoreToShow', array($this, 'getScoreToShowFilter')),
        );
    }

    public function getScoreToShowFilter($orderBy){
        switch ($orderBy) {
            case $orderBy == "hepval":
                $orderBy ="SVM";
                break;
            case $orderBy == "svmConfidence":
                $orderBy ="Conf.";
                break;
            case $orderBy == "patternCount":
                $orderBy ="Pattern";
                break;
            case $orderBy == "hepTermVarScore":
                $orderBy ="Term";
                break;
            case $orderBy == "ruleScore":
                $orderBy ="Rule";
                break;
        }
        return $orderBy;
    }

    public function getName()
    {
        return 'utility_extension';
    }
}



/*
            $client = new \Elastica\Client(array(
                'host' => 'limtox.cnio.es',
                'port' => 9205
            ));
            $index = $client->getIndex('melanomamine');
            $type = $index->getType("abstracts");
            $query = '{
                       "query": {
                           "filtered": {
                               "filter": {
                                   "bool": {
                                       "must": [
                                           {"exists" : { "field" : "mutatedProteins3" }}
                                       ]
                                   }
                               }
                           }
                       }
                   }
                   ';
            $path = $index->getName() . '/' . $type->getName() . '/_search';
            $method="Request::GET";
            $response = $client->request($path, $method, $query);
            ld($response);
            $responseArray=$response->getData();
            ldd($responseArray);
            */

            /*
            $elasticaQuery = new \Elastica\Query();
            $filterMissing = new \Elastica\Filter\Missing('mutatedProteins3');
            $queryBool = new \Elastica\Query\Bool();
            $filterBool = new \Elastica\Filter\Bool();
            $filterBool->addMustNot($filterMissing);
            $queryFiltered = new \Elastica\Query\Filtered($queryBool,$filterBool);
            $elasticaQuery->setQuery($queryFiltered);


            echo json_encode($elasticaQuery->toArray(), JSON_PRETTY_PRINT);
            $abstractsInfo = $this->container->get('fos_elastica.index.melanomamine.abstracts');
            $data = $abstractsInfo->search($elasticaQuery);
            $totalHits = $data->getTotalHits();
            ldd($totalHits);
            */

            /*$elasticaQuery = new \Elastica\Query();
            $elasticaQuery->setQuery(
              new \Elastica\Query\Filtered(
                new \Elastica\Query\Bool(),(new \Elastica\Filter\Bool())->addMustNot(new \Elastica\Filter\Missing('mutatedProteins3'))
              )
            );


            echo json_encode($elasticaQuery->toArray(), JSON_PRETTY_PRINT);
            $abstractsInfo = $this->container->get('fos_elastica.index.melanomamine.abstracts');
            $data = $abstractsInfo->search($elasticaQuery);
            $totalHits = $data->getTotalHits();
            ldd($totalHits);
            */
